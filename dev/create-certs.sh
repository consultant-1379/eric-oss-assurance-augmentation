#!/bin/bash

# ------------------------------------------------------------------
set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

# Section: Utility FUNCTIONS {{{1
# --------------------------------------------------------------------------

# script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg(){ echo >&2 -e "${1-}${NOFORMAT}"; }

msgt() { echo >&2 -e "[$(date +"%H:%M:%S")]${1-}${NOFORMAT}"; }

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

setup_colors

# Section: Main Script logic {{{1
# --------------------------------------------------------------------------
take () {
  mkdir -p "$@" && cd "${@:$#}"
}

# Version 2

msg "${GREEN} Creating Certificates for testing"
# Pre CODE {{{1

BASE_PATH=$(pwd)
mkdir -p "$1"

cd "$1"
TARGET_PATH=$(pwd)

msg "${GREEN} Target Directory: $TARGET_PATH"


cd "$TARGET_PATH"

CONF="conf"

# Create Certificates {{{1

take "$CONF"
msg "${GREEN} Create root Certificates"


# Create ROOT {{{2

msg "${GREEN} Creating Root Certificates"
# Create rootCA.key
take "$TARGET_PATH/$CONF/root"
openssl genrsa -des3 -passout pass:password -out rootCA.key 2048
openssl req -x509 -new -nodes -passin pass:password -key rootCA.key -sha256 -days 1825 -out rootCA.pem -subj '/C=CA/ST=Ontario/L=RootCACity/O=RootCAOrg/OU=RootCAUnit/CN=localhost'

keytool -importcert -noprompt -alias rootca -file rootCA.pem  -keystore truststore.jks -storepass password -storetype JKS


# Create Server {{{2
msg "${GREEN} Creating Server Certificates"
take "$TARGET_PATH/$CONF/server"
openssl genrsa -des3 -passout pass:password -out server.key 2048
openssl req -new -sha256 -passin pass:password -key server.key -out server.csr -subj '/C=CA/ST=Ontario/L=ServerCity/O=ServerOrg/OU=ServerUnit/CN=localhost'
openssl x509 -req -passin pass:password -in server.csr -CA ../root/rootCA.pem -CAkey ../root/rootCA.key -CAcreateserial -out server.pem -days 365 -sha256
# # Below command is required because the key generated by the first command is not in the format that is provided by SIP-TLS:
openssl rsa -passin pass:password -in server.key -out serverRSA.pem


# Create Wiremock {{{2
msg "${GREEN} Creating Wiremock Certificates"
take "$TARGET_PATH/$CONF/wiremock"
openssl genrsa -des3 -passout pass:password -out wiremock.key 2048
openssl req -new -sha256 -passin pass:password -key wiremock.key -out wiremock.csr -subj '/C=CA/ST=Ontario/L=WireMockCity/O=WireMockOrg/OU=WireMockUnit/CN=localhost'
openssl x509 -req -passin pass:password -in wiremock.csr -CA ../root/rootCA.pem -CAkey ../root/rootCA.key -CAcreateserial -out wiremock.pem -days 365 -sha256

openssl rsa -passin pass:password -in wiremock.key -out wiremockRSA.pem

openssl pkcs12 -export -in wiremock.pem -inkey wiremockRSA.pem -out keystore.p12 -password pass:password
keytool -importkeystore -srckeystore keystore.p12 -srcstoretype PKCS12 -destkeystore keystore.jks -deststoretype JKS -srcstorepass password -deststorepass password


# Create Kafka {{{2
msg "${GREEN} Creating Kafka Certificates"
take "$TARGET_PATH/$CONF/kafka"
openssl genrsa -des3 -passout pass:password -out kafka.key 2048
openssl req -new -sha256 -passin pass:password -key kafka.key -out kafka.csr -subj '/C=CA/ST=Ontario/L=WireMockCity/O=WireMockOrg/OU=WireMockUnit/CN=localhost'


# take "$TARGET_PATH/$CONF/kafka/10m"
# # A day: 1440 minutes
# faketime '1437 minutes ago' openssl x509 -req -passin pass:password -in ../kafka.csr -CA "$TARGET_PATH/$CONF/root/rootCA.pem" -CAkey "$TARGET_PATH/$CONF/root/rootCA.key" -CAcreateserial -out server.pem -days 1 -sha256
# openssl x509 -noout -startdate -enddate -in server.pem # Check the date
# openssl rsa -passin pass:password -in ../kafka.key -out serverRSA.pem
# openssl pkcs12 -export -in server.pem -inkey serverRSA.pem -out keystore.p12 -password pass:password
# keytool -importkeystore -srckeystore keystore.p12 -srcstoretype PKCS12 -destkeystore keystore.jks -deststoretype JKS -srcstorepass password -deststorepass password


# take "$TARGET_PATH/$CONF/kafka/720m"
# faketime '720 minutes ago' openssl x509 -req -passin pass:password -in ../kafka.csr -CA "$TARGET_PATH/$CONF/root/rootCA.pem" -CAkey "$TARGET_PATH/$CONF/root/rootCA.key" -CAcreateserial -out server.pem -days 1 -sha256
# openssl x509 -noout -startdate -enddate -in server.pem # Check the date
# openssl rsa -passin pass:password -in ../kafka.key -out serverRSA.pem
# openssl pkcs12 -export -in server.pem -inkey serverRSA.pem -out keystore.p12 -password pass:password
# keytool -importkeystore -srckeystore keystore.p12 -srcstoretype PKCS12 -destkeystore keystore.jks -deststoretype JKS -srcstorepass password -deststorepass password


take "$TARGET_PATH/$CONF/kafka/1y"
openssl x509 -req -passin pass:password -in ../kafka.csr -CA "$TARGET_PATH/$CONF/root/rootCA.pem" -CAkey "$TARGET_PATH/$CONF/root/rootCA.key" -CAcreateserial -out server.pem -days 365 -sha256
openssl x509 -noout -startdate -enddate -in server.pem # Check the date
openssl rsa -passin pass:password -in ../kafka.key -out serverRSA.pem
openssl pkcs12 -export -in server.pem -inkey serverRSA.pem -out keystore.p12 -password pass:password
keytool -importkeystore -srckeystore keystore.p12 -srcstoretype PKCS12 -destkeystore keystore.jks -deststoretype JKS -srcstorepass password -deststorepass password


# Orgnize Certificates {{{1
msg "${GREEN} Orgnize created certificates"

# AAS Certificates {{{2
msg "${GREEN} Create certificates folder for AAS"
# AAS rootca {{{3
mkdir -p "$TARGET_PATH/aas/rootca/truststore"
cp "$TARGET_PATH/$CONF/root/rootCA.pem" "$TARGET_PATH/aas/rootca/truststore"

# AAS server {{{3
mkdir -p "$TARGET_PATH/aas/server/keystore"
cp "$TARGET_PATH/$CONF/server/server.pem" "$TARGET_PATH/$CONF/server/serverRSA.pem" "$TARGET_PATH/aas/server/keystore"

# AAS kafak {{{3
mkdir -p "$TARGET_PATH/aas/kafka/keystore"
# KAFKA_SOUCR_DIR="$TARGET_PATH/$CONF/kafka/720m"
# KAFKA_SOUCR_DIR="$TARGET_PATH/$CONF/kafka/10m"
KAFKA_SOUCR_DIR="$TARGET_PATH/$CONF/kafka/1y"
cp "$KAFKA_SOUCR_DIR/server.pem" "$KAFKA_SOUCR_DIR/serverRSA.pem" "$TARGET_PATH/aas/kafka/keystore/"


# Server Kafka {{{2

msg "${GREEN} Create certificates folder for Kafka Server"
# Create Directory for Kafka Server
mkdir -p "$TARGET_PATH/kafka"
echo "password" > "$TARGET_PATH/kafka/kafka_credentials"
cp "$TARGET_PATH/$CONF/root/truststore.jks" "$TARGET_PATH/kafka"

# cp "$TARGET_PATH/$CONF/wiremock/keystore.jks" "$TARGET_PATH/kafka"    #Re-use wiremock keystore
# cp "$TARGET_PATH/$CONF/kafka/10m/keystore.jks" "$TARGET_PATH/kafka" # Use seprate keystore
# cp "$TARGET_PATH/$CONF/kafka/720m/keystore.jks" "$TARGET_PATH/kafka" # Use seprate keystore
cp "$TARGET_PATH/$CONF/kafka/1y/keystore.jks" "$TARGET_PATH/kafka" # Use seprate keystore



# Server Wiremock {{{2

msg "${GREEN} Create certificates folder for Wiremock"
mkdir -p "$TARGET_PATH/wiremock"
cp "$TARGET_PATH/$CONF/root/truststore.jks" "$TARGET_PATH/wiremock"
cp "$TARGET_PATH/$CONF/wiremock/keystore.jks" "$TARGET_PATH/wiremock"


# }}}2

# Cleanup
rm -r "${TARGET_PATH}/${CONF}"

(command -v exa &> /dev/null) && exa -T "$TARGET_PATH"

cd "$BASE_PATH"
echo "Done :)"
